##################################################
#
# Istio base (https://artifacthub.io/packages/helm/istio-official/base)
#

# created in certmanager yaml
- name: create 'istio-system' namespace
  kubernetes.core.k8s:
    name: istio-system
    api_version: v1
    kind: Namespace
    state: present

- name: add 'istio-base' helm repo
  kubernetes.core.helm_repository:
    name: istio-base
    repo_url: https://istio-release.storage.googleapis.com/charts

- name: install 'istio-base'
  kubernetes.core.helm:
    name: istio-base
    namespace: istio-system
    chart_ref: "istio/base"
    create_namespace: false
    # purge: yes
    update_repo_cache: yes

##################################################
#
# Istiod (https://artifacthub.io/packages/helm/istio-official/istiod)
#

- name: install 'istiod'
  kubernetes.core.helm:
    name: istiod
    namespace: istio-system
    chart_ref: "istio/istiod"
    create_namespace: false
    # purge: yes
    update_repo_cache: yes
    values:
      # values accepted: https://artifacthub.io/packages/helm/istio-official/istiod?modal=values&path=meshConfig
      # https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/
      # guide: https://baptistout.net/posts/passwordless-authentication-webauthn-keycloak-istio/
      meshConfig:
        accessLogFile: /dev/stdout
        extensionProviders:
          - name: "webauthn"
            envoyExtAuthzHttp:
              service: "oauth2-proxy.oauth.svc.cluster.local"
              port: 80
              includeHeadersInCheck:
                - x-user
                - authorization
                - cookie
              headersToUpstreamOnAllow:
                - authorization
                - x-auth-request-user
                - x-auth-request-email
                - x-auth-request-preferred-username

##################################################
#
# Istio Gateway (https://artifacthub.io/packages/helm/istio-official/gateway)
#

- name: install 'istio-ingressgateway'
  kubernetes.core.helm:
    name: istio-ingressgateway
    namespace: istio-system
    chart_ref: "istio/gateway"
    create_namespace: false
    # purge: yes
    update_repo_cache: yes
    values:
      service:
        type: LoadBalancer
        ports:
          - name: status-port
            port: 15021
            protocol: TCP
            targetPort: 15021
          - name: http2
            port: 80
            protocol: TCP
            targetPort: 80
          - name: https
            port: 443
            protocol: TCP
            targetPort: 443
        loadBalancerIP: "{{ istio.load_balancer_ip }}"

##################################################
#
# Cert-manager certificate creation
#

# TODO - remove some hard coded arguments
- name: transfer secrets file to helm host
  delegate_to: localhost
  shell: |
    rsync /home/ansible/homelab/homelab-services-ansible/roles/cert-manager-helm/secrets/cert-manager-creds.json ansible@192.168.20.119:~

# added for idempotency (if no secret set, no big deal)
- name: delete current acme-dns secret
  shell: |
    kubectl delete secret -n istio-system acme-dns --ignore-not-found

# create the secret to build the cert with API credentials from https://www.getlocalcert.net/
- name: create acme-dns secret (getlocalcert.net API creds)
  shell: |
    kubectl create secret -n istio-system generic acme-dns --from-file ~/cert-manager-creds.json

# https://docs.getlocalcert.net/acme-clients/cert-manager/
- name: define a ClusterIssuer for Istio Gateway
  kubernetes.core.k8s:
    name: clusterissuer-istio
    state: present
    namespace: istio-system
    definition:
      apiVersion: cert-manager.io/v1
      kind: Issuer
      metadata:
        name: letsencrypt-prod-cluster
        namespace: istio-system
      spec:
        acme:
          email: mayotoast2222@duck.com
          privateKeySecretRef:
            name: letsencrypt-prod-cluster
            # current API endpoint is production (commented version is staging version)
          server: https://acme-v02.api.letsencrypt.org/directory # https://acme-staging-v02.api.letsencrypt.org/directory
          solvers:
            - dns01:
                acmeDNS:
                  host: https://api.getlocalcert.net/api/v1/acme-dns-compat
                  accountSecretRef:
                    name: acme-dns
                    key: cert-manager-creds.json

- name: define a certificate for Istio Gateway
  kubernetes.core.k8s:
    name: cert-istio
    state: present
    namespace: istio-system
    definition:
      apiVersion: cert-manager.io/v1
      kind: Certificate
      metadata:
        name: cert-manager-istio
        namespace: istio-system
      spec:
        dnsNames:
          - andromeda.localhostcert.net
          # A wildcard cert as well (use quotes)
          - "*.andromeda.localhostcert.net"
        secretName: cert-manager-istio
        issuerRef:
          name: letsencrypt-prod-cluster # metadata name from ClusterIssuer

##################################################
#
# Istio install the actual gateway (https://github.com/datastrophic/kubernetes-deployment)
#

- name: install a shared-gateway to be reused by other deployments
  kubernetes.core.k8s:
    name: shared-gateway
    state: present
    namespace: istio-system
    definition:
      apiVersion: networking.istio.io/v1alpha3
      kind: Gateway
      metadata:
        name: shared-gateway
        namespace: istio-system
      spec:
        meshConfig:
          accessLogFile: /dev/stdout
        selector:
          # Use the default Ingress Gateway installed by Istio
          istio: ingressgateway
        servers:
          - port:
              number: 80
              name: http
              protocol: HTTP
            hosts:
              - "*"
            tls:
              httpsRedirect: true
          - port:
              number: 443
              name: https
              protocol: HTTPS
            hosts:
              - "*.{{ lan_tld }}" # connected to keycloak integration
              # - "gitea.andromeda.localhostcert.net"
              # - "jenkins.andromeda.localhostcert.net"
            tls:
              mode: SIMPLE
              credentialName: cert-manager-istio

##################################################
#
# Istio AuthorizationPolicy (https://baptistout.net/posts/passwordless-authentication-webauthn-keycloak-istio/)
#

- name: configure an AuthorizationPolicy
  kubernetes.core.k8s:
    name: istio-AuthorizationPolicy
    state: present
    namespace: istio-system
    definition:
      apiVersion: security.istio.io/v1beta1
      kind: AuthorizationPolicy
      metadata:
        name: webauthn
        namespace: istio-system
      spec:
        selector:
          matchLabels:
            app: istio-ingressgateway # apply to the Istio Ingress Gateway pod
        action: CUSTOM
        provider:
          name: "webauthn"
        rules:
        - to:
          - operation:
              hosts: ["{{ gateway.api_gateway_dn }}"] # only for the API domain
              