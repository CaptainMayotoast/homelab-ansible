- name: create 'oauth' namespace # oauth2-proxy and keycloak are all in the same namespace
  kubernetes.core.k8s:
    name: oauth
    api_version: v1
    kind: Namespace
    state: present

# Bitnami has a helm chart for Keycloak, but try this first
# https://raw.githubusercontent.com/keycloak/keycloak-quickstarts/20.0.2/kubernetes-examples/keycloak.yaml
- name: declare Keycloak as a Service
  kubernetes.core.k8s:
    state: present
    namespace: oauth
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: keycloak
        labels:
          app: keycloak
      spec:
        ports:
          - name: http
            port: 8080
            targetPort: 8080
        selector:
          app: keycloak
        loadBalancerIP: "{{ keycloak.load_balancer_ip }}" # for debugging
        type: LoadBalancer

# TODO - remove some hard coded arguments
# - name: transfer Keycloak config file from Ansible development machine to helm host
#   delegate_to: localhost
#   shell: |
#     rsync /home/ansible/homelab/homelab-services-ansible/roles/keycloak-oauth2-proxy/config/homelab-users-realm.json ansible@192.168.20.119:~

# https://stackoverflow.com/questions/71740110/create-keycloak-deployment-with-imported-realm-configuration
- name: create a ConfigMap from Keycloak realm JSON
  kubernetes.core.k8s:
    state: present
    namespace: oauth
    definition:
      apiVersion: v1
      data:
        realm.json: |
          {
            "id": "d235b2e5-aa26-4f7d-bcd1-d08cf59c3d58",
            "realm": "homelab-users",
            "notBefore": 0,
            "defaultSignatureAlgorithm": "RS256",
            "revokeRefreshToken": false,
            "refreshTokenMaxReuse": 0,
            "accessTokenLifespan": 3600,
            "accessTokenLifespanForImplicitFlow": 900,
            "ssoSessionIdleTimeout": 86400,
            "ssoSessionMaxLifespan": 172800,
            "ssoSessionIdleTimeoutRememberMe": 0,
            "ssoSessionMaxLifespanRememberMe": 0,
            "offlineSessionIdleTimeout": 2592000,
            "offlineSessionMaxLifespanEnabled": false,
            "offlineSessionMaxLifespan": 5184000,
            "clientSessionIdleTimeout": 0,
            "clientSessionMaxLifespan": 0,
            "clientOfflineSessionIdleTimeout": 0,
            "clientOfflineSessionMaxLifespan": 0,
            "accessCodeLifespan": 60,
            "accessCodeLifespanUserAction": 300,
            "accessCodeLifespanLogin": 1800,
            "actionTokenGeneratedByAdminLifespan": 43200,
            "actionTokenGeneratedByUserLifespan": 300,
            "oauth2DeviceCodeLifespan": 600,
            "oauth2DevicePollingInterval": 5,
            "enabled": true,
            "sslRequired": "external",
            "registrationAllowed": true,
            "registrationEmailAsUsername": false,
            "rememberMe": false,
            "verifyEmail": false,
            "loginWithEmailAllowed": true,
            "duplicateEmailsAllowed": false,
            "resetPasswordAllowed": false,
            "editUsernameAllowed": false,
            "bruteForceProtected": false,
            "permanentLockout": false,
            "maxFailureWaitSeconds": 900,
            "minimumQuickLoginWaitSeconds": 60,
            "waitIncrementSeconds": 60,
            "quickLoginCheckMilliSeconds": 1000,
            "maxDeltaTimeSeconds": 43200,
            "failureFactor": 30,
            "defaultRole": {
              "id": "cb8ea247-6541-44d3-8c07-4832d1039e3e",
              "name": "default-roles-homelab-users",
              "description": "${role_default-roles}",
              "composite": true,
              "clientRole": false,
              "containerId": "d235b2e5-aa26-4f7d-bcd1-d08cf59c3d58"
            },
            "requiredCredentials": [
              "password"
            ],
            "otpPolicyType": "totp",
            "otpPolicyAlgorithm": "HmacSHA1",
            "otpPolicyInitialCounter": 0,
            "otpPolicyDigits": 6,
            "otpPolicyLookAheadWindow": 1,
            "otpPolicyPeriod": 30,
            "otpPolicyCodeReusable": false,
            "otpSupportedApplications": [
              "totpAppFreeOTPName",
              "totpAppGoogleName"
            ],
            "webAuthnPolicyRpEntityName": "keycloak",
            "webAuthnPolicySignatureAlgorithms": [
              "ES256"
            ],
            "webAuthnPolicyRpId": "",
            "webAuthnPolicyAttestationConveyancePreference": "not specified",
            "webAuthnPolicyAuthenticatorAttachment": "not specified",
            "webAuthnPolicyRequireResidentKey": "not specified",
            "webAuthnPolicyUserVerificationRequirement": "not specified",
            "webAuthnPolicyCreateTimeout": 0,
            "webAuthnPolicyAvoidSameAuthenticatorRegister": false,
            "webAuthnPolicyAcceptableAaguids": [],
            "webAuthnPolicyPasswordlessRpEntityName": "keycloak",
            "webAuthnPolicyPasswordlessSignatureAlgorithms": [
              "ES256"
            ],
            "webAuthnPolicyPasswordlessRpId": "",
            "webAuthnPolicyPasswordlessAttestationConveyancePreference": "not specified",
            "webAuthnPolicyPasswordlessAuthenticatorAttachment": "not specified",
            "webAuthnPolicyPasswordlessRequireResidentKey": "not specified",
            "webAuthnPolicyPasswordlessUserVerificationRequirement": "not specified",
            "webAuthnPolicyPasswordlessCreateTimeout": 0,
            "webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister": false,
            "webAuthnPolicyPasswordlessAcceptableAaguids": [],
            "scopeMappings": [
              {
                "clientScope": "offline_access",
                "roles": [
                  "offline_access"
                ]
              }
            ],
            "clientScopeMappings": {
              "account": [
                {
                  "client": "account-console",
                  "roles": [
                    "manage-account",
                    "view-groups"
                  ]
                }
              ]
            },
            "clients": [
              {
                "id": "060dc383-ea6a-4b8c-a30a-3a5166a2c851",
                "clientId": "account",
                "name": "${client_account}",
                "rootUrl": "${authBaseUrl}",
                "baseUrl": "/realms/homelab-users/account/",
                "surrogateAuthRequired": false,
                "enabled": true,
                "alwaysDisplayInConsole": false,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": [
                  "/realms/homelab-users/account/*"
                ],
                "webOrigins": [],
                "notBefore": 0,
                "bearerOnly": false,
                "consentRequired": false,
                "standardFlowEnabled": true,
                "implicitFlowEnabled": false,
                "directAccessGrantsEnabled": false,
                "serviceAccountsEnabled": false,
                "publicClient": true,
                "frontchannelLogout": false,
                "protocol": "openid-connect",
                "attributes": {
                  "post.logout.redirect.uris": "+"
                },
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": false,
                "nodeReRegistrationTimeout": 0,
                "defaultClientScopes": [
                  "web-origins",
                  "acr",
                  "profile",
                  "roles",
                  "email"
                ],
                "optionalClientScopes": [
                  "address",
                  "phone",
                  "offline_access",
                  "microprofile-jwt"
                ]
              },
              {
                "id": "de536e1b-59a1-4d57-ad1e-94c6adde9a3d",
                "clientId": "account-console",
                "name": "${client_account-console}",
                "rootUrl": "${authBaseUrl}",
                "baseUrl": "/realms/homelab-users/account/",
                "surrogateAuthRequired": false,
                "enabled": true,
                "alwaysDisplayInConsole": false,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": [
                  "/realms/homelab-users/account/*"
                ],
                "webOrigins": [],
                "notBefore": 0,
                "bearerOnly": false,
                "consentRequired": false,
                "standardFlowEnabled": true,
                "implicitFlowEnabled": false,
                "directAccessGrantsEnabled": false,
                "serviceAccountsEnabled": false,
                "publicClient": true,
                "frontchannelLogout": false,
                "protocol": "openid-connect",
                "attributes": {
                  "post.logout.redirect.uris": "+",
                  "pkce.code.challenge.method": "S256"
                },
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": false,
                "nodeReRegistrationTimeout": 0,
                "protocolMappers": [
                  {
                    "id": "71345fa0-150f-428a-9f35-adcaa88dca54",
                    "name": "audience resolve",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-audience-resolve-mapper",
                    "consentRequired": false,
                    "config": {}
                  }
                ],
                "defaultClientScopes": [
                  "web-origins",
                  "acr",
                  "profile",
                  "roles",
                  "email"
                ],
                "optionalClientScopes": [
                  "address",
                  "phone",
                  "offline_access",
                  "microprofile-jwt"
                ]
              },
              {
                "id": "d5b118b3-506e-4a52-bd78-59775374ca3b",
                "clientId": "admin-cli",
                "name": "${client_admin-cli}",
                "surrogateAuthRequired": false,
                "enabled": true,
                "alwaysDisplayInConsole": false,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": [],
                "webOrigins": [],
                "notBefore": 0,
                "bearerOnly": false,
                "consentRequired": false,
                "standardFlowEnabled": false,
                "implicitFlowEnabled": false,
                "directAccessGrantsEnabled": true,
                "serviceAccountsEnabled": false,
                "publicClient": true,
                "frontchannelLogout": false,
                "protocol": "openid-connect",
                "attributes": {
                  "post.logout.redirect.uris": "+"
                },
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": false,
                "nodeReRegistrationTimeout": 0,
                "defaultClientScopes": [
                  "web-origins",
                  "acr",
                  "profile",
                  "roles",
                  "email"
                ],
                "optionalClientScopes": [
                  "address",
                  "phone",
                  "offline_access",
                  "microprofile-jwt"
                ]
              },
              {
                "id": "3a87c2eb-2db1-4b0e-a255-16124406d86c",
                "clientId": "broker",
                "name": "${client_broker}",
                "surrogateAuthRequired": false,
                "enabled": true,
                "alwaysDisplayInConsole": false,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": [],
                "webOrigins": [],
                "notBefore": 0,
                "bearerOnly": true,
                "consentRequired": false,
                "standardFlowEnabled": true,
                "implicitFlowEnabled": false,
                "directAccessGrantsEnabled": false,
                "serviceAccountsEnabled": false,
                "publicClient": false,
                "frontchannelLogout": false,
                "protocol": "openid-connect",
                "attributes": {
                  "post.logout.redirect.uris": "+"
                },
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": false,
                "nodeReRegistrationTimeout": 0,
                "defaultClientScopes": [
                  "web-origins",
                  "acr",
                  "profile",
                  "roles",
                  "email"
                ],
                "optionalClientScopes": [
                  "address",
                  "phone",
                  "offline_access",
                  "microprofile-jwt"
                ]
              },
              {
                "id": "92d57261-e060-45e1-89ae-df16969222a6",
                "clientId": "gloo",
                "name": "",
                "description": "",
                "rootUrl": "https://api.andromeda.localhostcert.net/",
                "adminUrl": "",
                "baseUrl": "https://api.andromeda.localhostcert.net/",
                "surrogateAuthRequired": false,
                "enabled": true,
                "alwaysDisplayInConsole": false,
                "clientAuthenticatorType": "client-secret",
                "secret": "**********",
                "redirectUris": [
                  "https://api.andromeda.localhostcert.net/*"
                ],
                "webOrigins": [],
                "notBefore": 0,
                "bearerOnly": false,
                "consentRequired": false,
                "standardFlowEnabled": true,
                "implicitFlowEnabled": false,
                "directAccessGrantsEnabled": true,
                "serviceAccountsEnabled": false,
                "publicClient": false,
                "frontchannelLogout": true,
                "protocol": "openid-connect",
                "attributes": {
                  "oidc.ciba.grant.enabled": "false",
                  "client.secret.creation.time": "1664195155",
                  "backchannel.logout.session.required": "true",
                  "post.logout.redirect.uris": "+",
                  "display.on.consent.screen": "false",
                  "oauth2.device.authorization.grant.enabled": "false",
                  "backchannel.logout.revoke.offline.tokens": "false"
                },
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": true,
                "nodeReRegistrationTimeout": -1,
                "protocolMappers": [
                  {
                    "id": "bb3a5263-15ad-487a-a659-8298127db9ff",
                    "name": "gloo-audience",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-audience-mapper",
                    "consentRequired": false,
                    "config": {
                      "included.client.audience": "gloo",
                      "id.token.claim": "false",
                      "access.token.claim": "true"
                    }
                  }
                ],
                "defaultClientScopes": [
                  "web-origins",
                  "acr",
                  "profile",
                  "roles",
                  "email"
                ],
                "optionalClientScopes": [
                  "address",
                  "phone",
                  "offline_access",
                  "microprofile-jwt"
                ]
              },
              {
                "id": "97f9f455-acb0-40fb-aac6-e0a016ac8441",
                "clientId": "realm-management",
                "name": "${client_realm-management}",
                "surrogateAuthRequired": false,
                "enabled": true,
                "alwaysDisplayInConsole": false,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": [],
                "webOrigins": [],
                "notBefore": 0,
                "bearerOnly": true,
                "consentRequired": false,
                "standardFlowEnabled": true,
                "implicitFlowEnabled": false,
                "directAccessGrantsEnabled": false,
                "serviceAccountsEnabled": false,
                "publicClient": false,
                "frontchannelLogout": false,
                "protocol": "openid-connect",
                "attributes": {
                  "post.logout.redirect.uris": "+"
                },
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": false,
                "nodeReRegistrationTimeout": 0,
                "defaultClientScopes": [
                  "web-origins",
                  "acr",
                  "profile",
                  "roles",
                  "email"
                ],
                "optionalClientScopes": [
                  "address",
                  "phone",
                  "offline_access",
                  "microprofile-jwt"
                ]
              },
              {
                "id": "24a8a069-c5d5-4fcb-8d77-ca51c25eecf8",
                "clientId": "security-admin-console",
                "name": "${client_security-admin-console}",
                "rootUrl": "${authAdminUrl}",
                "baseUrl": "/admin/homelab-users/console/",
                "surrogateAuthRequired": false,
                "enabled": true,
                "alwaysDisplayInConsole": false,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": [
                  "/admin/homelab-users/console/*"
                ],
                "webOrigins": [
                  "+"
                ],
                "notBefore": 0,
                "bearerOnly": false,
                "consentRequired": false,
                "standardFlowEnabled": true,
                "implicitFlowEnabled": false,
                "directAccessGrantsEnabled": false,
                "serviceAccountsEnabled": false,
                "publicClient": true,
                "frontchannelLogout": false,
                "protocol": "openid-connect",
                "attributes": {
                  "post.logout.redirect.uris": "+",
                  "pkce.code.challenge.method": "S256"
                },
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": false,
                "nodeReRegistrationTimeout": 0,
                "protocolMappers": [
                  {
                    "id": "49dbbb5d-d3ba-4e15-aa61-8ae0412193e8",
                    "name": "locale",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-usermodel-attribute-mapper",
                    "consentRequired": false,
                    "config": {
                      "userinfo.token.claim": "true",
                      "user.attribute": "locale",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "claim.name": "locale",
                      "jsonType.label": "String"
                    }
                  }
                ],
                "defaultClientScopes": [
                  "web-origins",
                  "acr",
                  "profile",
                  "roles",
                  "email"
                ],
                "optionalClientScopes": [
                  "address",
                  "phone",
                  "offline_access",
                  "microprofile-jwt"
                ]
              }
            ],
            "clientScopes": [
              {
                "id": "9911b3b2-33cc-46a7-952f-6d17ecb23b47",
                "name": "profile",
                "description": "OpenID Connect built-in scope: profile",
                "protocol": "openid-connect",
                "attributes": {
                  "include.in.token.scope": "true",
                  "display.on.consent.screen": "true",
                  "consent.screen.text": "${profileScopeConsentText}"
                },
                "protocolMappers": [
                  {
                    "id": "08da53b5-c9bf-4d25-99d4-570bc81747bc",
                    "name": "website",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-usermodel-attribute-mapper",
                    "consentRequired": false,
                    "config": {
                      "userinfo.token.claim": "true",
                      "user.attribute": "website",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "claim.name": "website",
                      "jsonType.label": "String"
                    }
                  },
                  {
                    "id": "eed256ed-b0d9-4143-9df6-cba94b301dcc",
                    "name": "profile",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-usermodel-attribute-mapper",
                    "consentRequired": false,
                    "config": {
                      "userinfo.token.claim": "true",
                      "user.attribute": "profile",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "claim.name": "profile",
                      "jsonType.label": "String"
                    }
                  },
                  {
                    "id": "9ae9907e-b474-4370-9920-b06819ce83af",
                    "name": "family name",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-usermodel-property-mapper",
                    "consentRequired": false,
                    "config": {
                      "userinfo.token.claim": "true",
                      "user.attribute": "lastName",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "claim.name": "family_name",
                      "jsonType.label": "String"
                    }
                  },
                  {
                    "id": "73916504-f97e-4b78-bb8f-17be7147fe8c",
                    "name": "updated at",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-usermodel-attribute-mapper",
                    "consentRequired": false,
                    "config": {
                      "userinfo.token.claim": "true",
                      "user.attribute": "updatedAt",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "claim.name": "updated_at",
                      "jsonType.label": "long"
                    }
                  },
                  {
                    "id": "49e008fc-abae-4745-b40d-aac0615b1569",
                    "name": "zoneinfo",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-usermodel-attribute-mapper",
                    "consentRequired": false,
                    "config": {
                      "userinfo.token.claim": "true",
                      "user.attribute": "zoneinfo",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "claim.name": "zoneinfo",
                      "jsonType.label": "String"
                    }
                  },
                  {
                    "id": "454fd4dc-d028-47ea-90a4-a7221a0fa66d",
                    "name": "full name",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-full-name-mapper",
                    "consentRequired": false,
                    "config": {
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  },
                  {
                    "id": "87bd2649-e50e-4199-9b8b-93d977feff40",
                    "name": "birthdate",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-usermodel-attribute-mapper",
                    "consentRequired": false,
                    "config": {
                      "userinfo.token.claim": "true",
                      "user.attribute": "birthdate",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "claim.name": "birthdate",
                      "jsonType.label": "String"
                    }
                  },
                  {
                    "id": "a13c5746-1ed4-430f-9ea6-56bf23d83e43",
                    "name": "locale",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-usermodel-attribute-mapper",
                    "consentRequired": false,
                    "config": {
                      "userinfo.token.claim": "true",
                      "user.attribute": "locale",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "claim.name": "locale",
                      "jsonType.label": "String"
                    }
                  },
                  {
                    "id": "4b10b88c-aa03-470f-abff-4d82a6175b0b",
                    "name": "username",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-usermodel-property-mapper",
                    "consentRequired": false,
                    "config": {
                      "userinfo.token.claim": "true",
                      "user.attribute": "username",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "claim.name": "preferred_username",
                      "jsonType.label": "String"
                    }
                  },
                  {
                    "id": "c51a198a-7511-4f82-b188-8d88f3be7cbb",
                    "name": "given name",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-usermodel-property-mapper",
                    "consentRequired": false,
                    "config": {
                      "userinfo.token.claim": "true",
                      "user.attribute": "firstName",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "claim.name": "given_name",
                      "jsonType.label": "String"
                    }
                  },
                  {
                    "id": "f72badd8-4968-497e-92fe-dd8f03aa9614",
                    "name": "picture",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-usermodel-attribute-mapper",
                    "consentRequired": false,
                    "config": {
                      "userinfo.token.claim": "true",
                      "user.attribute": "picture",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "claim.name": "picture",
                      "jsonType.label": "String"
                    }
                  },
                  {
                    "id": "fc544b9d-68b9-43cf-983b-b3b53ad8efaf",
                    "name": "nickname",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-usermodel-attribute-mapper",
                    "consentRequired": false,
                    "config": {
                      "userinfo.token.claim": "true",
                      "user.attribute": "nickname",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "claim.name": "nickname",
                      "jsonType.label": "String"
                    }
                  },
                  {
                    "id": "fc0c63cd-c2a2-48be-b51d-b4b4ee53ae2e",
                    "name": "gender",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-usermodel-attribute-mapper",
                    "consentRequired": false,
                    "config": {
                      "userinfo.token.claim": "true",
                      "user.attribute": "gender",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "claim.name": "gender",
                      "jsonType.label": "String"
                    }
                  },
                  {
                    "id": "4123fe0e-46ea-4935-8a75-6a69f6dbfaf5",
                    "name": "middle name",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-usermodel-attribute-mapper",
                    "consentRequired": false,
                    "config": {
                      "userinfo.token.claim": "true",
                      "user.attribute": "middleName",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "claim.name": "middle_name",
                      "jsonType.label": "String"
                    }
                  }
                ]
              },
              {
                "id": "6d1b59e1-123e-4b90-bd5b-dcfd4aa0a3f3",
                "name": "address",
                "description": "OpenID Connect built-in scope: address",
                "protocol": "openid-connect",
                "attributes": {
                  "include.in.token.scope": "true",
                  "display.on.consent.screen": "true",
                  "consent.screen.text": "${addressScopeConsentText}"
                },
                "protocolMappers": [
                  {
                    "id": "b87b4bce-854c-426a-a048-8b64455fde9f",
                    "name": "address",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-address-mapper",
                    "consentRequired": false,
                    "config": {
                      "user.attribute.formatted": "formatted",
                      "user.attribute.country": "country",
                      "user.attribute.postal_code": "postal_code",
                      "userinfo.token.claim": "true",
                      "user.attribute.street": "street",
                      "id.token.claim": "true",
                      "user.attribute.region": "region",
                      "access.token.claim": "true",
                      "user.attribute.locality": "locality"
                    }
                  }
                ]
              },
              {
                "id": "a58d0265-e59d-40bc-b53e-85e9e98ffc58",
                "name": "phone",
                "description": "OpenID Connect built-in scope: phone",
                "protocol": "openid-connect",
                "attributes": {
                  "include.in.token.scope": "true",
                  "display.on.consent.screen": "true",
                  "consent.screen.text": "${phoneScopeConsentText}"
                },
                "protocolMappers": [
                  {
                    "id": "162631f8-e866-48eb-b88d-9f8a7571fb09",
                    "name": "phone number",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-usermodel-attribute-mapper",
                    "consentRequired": false,
                    "config": {
                      "userinfo.token.claim": "true",
                      "user.attribute": "phoneNumber",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "claim.name": "phone_number",
                      "jsonType.label": "String"
                    }
                  },
                  {
                    "id": "3b228235-5fc9-4e78-b668-12deb6b72d14",
                    "name": "phone number verified",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-usermodel-attribute-mapper",
                    "consentRequired": false,
                    "config": {
                      "userinfo.token.claim": "true",
                      "user.attribute": "phoneNumberVerified",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "claim.name": "phone_number_verified",
                      "jsonType.label": "boolean"
                    }
                  }
                ]
              },
              {
                "id": "60bbb50f-c58e-41ed-90ae-f20deaf192a9",
                "name": "email",
                "description": "OpenID Connect built-in scope: email",
                "protocol": "openid-connect",
                "attributes": {
                  "include.in.token.scope": "true",
                  "display.on.consent.screen": "true",
                  "consent.screen.text": "${emailScopeConsentText}"
                },
                "protocolMappers": [
                  {
                    "id": "11e88087-a784-45aa-bdff-16f12117550b",
                    "name": "email verified",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-usermodel-property-mapper",
                    "consentRequired": false,
                    "config": {
                      "userinfo.token.claim": "true",
                      "user.attribute": "emailVerified",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "claim.name": "email_verified",
                      "jsonType.label": "boolean"
                    }
                  },
                  {
                    "id": "fb6b83af-bcb6-47ef-8b5a-63abcbfd5346",
                    "name": "email",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-usermodel-property-mapper",
                    "consentRequired": false,
                    "config": {
                      "userinfo.token.claim": "true",
                      "user.attribute": "email",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "claim.name": "email",
                      "jsonType.label": "String"
                    }
                  }
                ]
              },
              {
                "id": "de315bf1-570d-4559-b41b-ad02988eeb8f",
                "name": "web-origins",
                "description": "OpenID Connect scope for add allowed web origins to the access token",
                "protocol": "openid-connect",
                "attributes": {
                  "include.in.token.scope": "false",
                  "display.on.consent.screen": "false",
                  "consent.screen.text": ""
                },
                "protocolMappers": [
                  {
                    "id": "b9702104-4fa8-432a-af67-7cdae40b9ac7",
                    "name": "allowed web origins",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-allowed-origins-mapper",
                    "consentRequired": false,
                    "config": {}
                  }
                ]
              },
              {
                "id": "cf07bdc6-96b8-4899-a4b9-4a1faaca0576",
                "name": "offline_access",
                "description": "OpenID Connect built-in scope: offline_access",
                "protocol": "openid-connect",
                "attributes": {
                  "consent.screen.text": "${offlineAccessScopeConsentText}",
                  "display.on.consent.screen": "true"
                }
              },
              {
                "id": "6e0b7e61-7cb8-4bf7-bd14-83c0672edd8f",
                "name": "acr",
                "description": "OpenID Connect scope for add acr (authentication context class reference) to the token",
                "protocol": "openid-connect",
                "attributes": {
                  "include.in.token.scope": "false",
                  "display.on.consent.screen": "false"
                },
                "protocolMappers": [
                  {
                    "id": "4b8f589c-058b-4241-9f97-d6bd6d888ee2",
                    "name": "acr loa level",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-acr-mapper",
                    "consentRequired": false,
                    "config": {
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  }
                ]
              },
              {
                "id": "b4e15232-07ba-4edb-804d-5532f72324b8",
                "name": "role_list",
                "description": "SAML role list",
                "protocol": "saml",
                "attributes": {
                  "consent.screen.text": "${samlRoleListScopeConsentText}",
                  "display.on.consent.screen": "true"
                },
                "protocolMappers": [
                  {
                    "id": "1f5c8003-2ac0-49e2-a1b8-89a10c8271da",
                    "name": "role list",
                    "protocol": "saml",
                    "protocolMapper": "saml-role-list-mapper",
                    "consentRequired": false,
                    "config": {
                      "single": "false",
                      "attribute.nameformat": "Basic",
                      "attribute.name": "Role"
                    }
                  }
                ]
              },
              {
                "id": "69535646-d4e7-47e7-a36a-668ac31a8deb",
                "name": "roles",
                "description": "OpenID Connect scope for add user roles to the access token",
                "protocol": "openid-connect",
                "attributes": {
                  "include.in.token.scope": "false",
                  "display.on.consent.screen": "true",
                  "consent.screen.text": "${rolesScopeConsentText}"
                },
                "protocolMappers": [
                  {
                    "id": "559584ee-2af3-4a14-9ffa-3f060dea9211",
                    "name": "client roles",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-usermodel-client-role-mapper",
                    "consentRequired": false,
                    "config": {
                      "user.attribute": "foo",
                      "access.token.claim": "true",
                      "claim.name": "resource_access.${client_id}.roles",
                      "jsonType.label": "String",
                      "multivalued": "true"
                    }
                  },
                  {
                    "id": "33cf54bb-3220-42a0-a13f-2b7514a7a918",
                    "name": "realm roles",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-usermodel-realm-role-mapper",
                    "consentRequired": false,
                    "config": {
                      "user.attribute": "foo",
                      "access.token.claim": "true",
                      "claim.name": "realm_access.roles",
                      "jsonType.label": "String",
                      "multivalued": "true"
                    }
                  },
                  {
                    "id": "2b716167-9e2c-4efe-b800-cd0c3b00619b",
                    "name": "audience resolve",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-audience-resolve-mapper",
                    "consentRequired": false,
                    "config": {}
                  }
                ]
              },
              {
                "id": "76bd72c6-601f-4c86-afa5-7e5d1ba63f21",
                "name": "microprofile-jwt",
                "description": "Microprofile - JWT built-in scope",
                "protocol": "openid-connect",
                "attributes": {
                  "include.in.token.scope": "true",
                  "display.on.consent.screen": "false"
                },
                "protocolMappers": [
                  {
                    "id": "fc575566-b172-49d4-a6d6-559b1711c250",
                    "name": "upn",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-usermodel-property-mapper",
                    "consentRequired": false,
                    "config": {
                      "userinfo.token.claim": "true",
                      "user.attribute": "username",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "claim.name": "upn",
                      "jsonType.label": "String"
                    }
                  },
                  {
                    "id": "d253dec0-ce38-43b2-8e05-a7507b6fe6e5",
                    "name": "groups",
                    "protocol": "openid-connect",
                    "protocolMapper": "oidc-usermodel-realm-role-mapper",
                    "consentRequired": false,
                    "config": {
                      "multivalued": "true",
                      "userinfo.token.claim": "true",
                      "user.attribute": "foo",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "claim.name": "groups",
                      "jsonType.label": "String"
                    }
                  }
                ]
              }
            ],
            "defaultDefaultClientScopes": [
              "role_list",
              "profile",
              "email",
              "roles",
              "web-origins",
              "acr"
            ],
            "defaultOptionalClientScopes": [
              "offline_access",
              "address",
              "phone",
              "microprofile-jwt"
            ],
            "browserSecurityHeaders": {
              "contentSecurityPolicyReportOnly": "",
              "xContentTypeOptions": "nosniff",
              "xRobotsTag": "none",
              "xFrameOptions": "SAMEORIGIN",
              "contentSecurityPolicy": "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
              "xXSSProtection": "1; mode=block",
              "strictTransportSecurity": "max-age=31536000; includeSubDomains"
            },
            "smtpServer": {},
            "eventsEnabled": false,
            "eventsListeners": [
              "jboss-logging"
            ],
            "enabledEventTypes": [],
            "adminEventsEnabled": false,
            "adminEventsDetailsEnabled": false,
            "identityProviders": [],
            "identityProviderMappers": [],
            "components": {
              "org.keycloak.services.clientregistration.policy.ClientRegistrationPolicy": [
                {
                  "id": "fda8812d-556e-4241-a0ad-2191ac15b69e",
                  "name": "Trusted Hosts",
                  "providerId": "trusted-hosts",
                  "subType": "anonymous",
                  "subComponents": {},
                  "config": {
                    "host-sending-registration-request-must-match": [
                      "true"
                    ],
                    "client-uris-must-match": [
                      "true"
                    ]
                  }
                },
                {
                  "id": "ab446a86-b1c9-49e8-b1b5-f591f8222acd",
                  "name": "Allowed Protocol Mapper Types",
                  "providerId": "allowed-protocol-mappers",
                  "subType": "authenticated",
                  "subComponents": {},
                  "config": {
                    "allowed-protocol-mapper-types": [
                      "saml-user-attribute-mapper",
                      "oidc-full-name-mapper",
                      "saml-role-list-mapper",
                      "oidc-sha256-pairwise-sub-mapper",
                      "oidc-usermodel-property-mapper",
                      "oidc-usermodel-attribute-mapper",
                      "oidc-address-mapper",
                      "saml-user-property-mapper"
                    ]
                  }
                },
                {
                  "id": "a305e01f-82f1-4b65-971c-22d66f9ed5a2",
                  "name": "Consent Required",
                  "providerId": "consent-required",
                  "subType": "anonymous",
                  "subComponents": {},
                  "config": {}
                },
                {
                  "id": "0ca51310-6121-4e1d-bea0-28a577cc5917",
                  "name": "Full Scope Disabled",
                  "providerId": "scope",
                  "subType": "anonymous",
                  "subComponents": {},
                  "config": {}
                },
                {
                  "id": "132bbaad-fac2-4726-9cf7-a220c5b6dc4a",
                  "name": "Max Clients Limit",
                  "providerId": "max-clients",
                  "subType": "anonymous",
                  "subComponents": {},
                  "config": {
                    "max-clients": [
                      "200"
                    ]
                  }
                },
                {
                  "id": "a37f38d1-d08a-4ad4-b8b1-62dbdeaeb1d4",
                  "name": "Allowed Protocol Mapper Types",
                  "providerId": "allowed-protocol-mappers",
                  "subType": "anonymous",
                  "subComponents": {},
                  "config": {
                    "allowed-protocol-mapper-types": [
                      "saml-role-list-mapper",
                      "oidc-address-mapper",
                      "saml-user-attribute-mapper",
                      "oidc-full-name-mapper",
                      "oidc-usermodel-attribute-mapper",
                      "oidc-sha256-pairwise-sub-mapper",
                      "oidc-usermodel-property-mapper",
                      "saml-user-property-mapper"
                    ]
                  }
                },
                {
                  "id": "36a7ebe1-70e7-4a35-b34c-b7daca229c10",
                  "name": "Allowed Client Scopes",
                  "providerId": "allowed-client-templates",
                  "subType": "authenticated",
                  "subComponents": {},
                  "config": {
                    "allow-default-scopes": [
                      "true"
                    ]
                  }
                },
                {
                  "id": "e570d988-c226-4716-b72c-e8c550575757",
                  "name": "Allowed Client Scopes",
                  "providerId": "allowed-client-templates",
                  "subType": "anonymous",
                  "subComponents": {},
                  "config": {
                    "allow-default-scopes": [
                      "true"
                    ]
                  }
                }
              ],
              "org.keycloak.userprofile.UserProfileProvider": [
                {
                  "id": "fba65c02-892a-44ea-967a-b48805a930ca",
                  "providerId": "declarative-user-profile",
                  "subComponents": {},
                  "config": {}
                }
              ],
              "org.keycloak.keys.KeyProvider": [
                {
                  "id": "196f15f3-a94d-486b-b274-f55492abc596",
                  "name": "rsa-enc-generated",
                  "providerId": "rsa-enc-generated",
                  "subComponents": {},
                  "config": {
                    "priority": [
                      "100"
                    ],
                    "algorithm": [
                      "RSA-OAEP"
                    ]
                  }
                },
                {
                  "id": "07be5330-51a2-4e40-b444-c959edf694e8",
                  "name": "aes-generated",
                  "providerId": "aes-generated",
                  "subComponents": {},
                  "config": {
                    "priority": [
                      "100"
                    ]
                  }
                },
                {
                  "id": "4203604b-6d2f-4cf4-82ed-33e61136d934",
                  "name": "rsa-generated",
                  "providerId": "rsa-generated",
                  "subComponents": {},
                  "config": {
                    "priority": [
                      "100"
                    ]
                  }
                },
                {
                  "id": "f6ede483-c800-4204-80d2-4abd7a4879bf",
                  "name": "hmac-generated",
                  "providerId": "hmac-generated",
                  "subComponents": {},
                  "config": {
                    "priority": [
                      "100"
                    ],
                    "algorithm": [
                      "HS256"
                    ]
                  }
                }
              ]
            },
            "internationalizationEnabled": false,
            "supportedLocales": [],
            "authenticationFlows": [
              {
                "id": "98dbfbbc-4406-4ae4-83e7-366c60cfd64d",
                "alias": "Account verification options",
                "description": "Method with which to verity the existing account",
                "providerId": "basic-flow",
                "topLevel": false,
                "builtIn": true,
                "authenticationExecutions": [
                  {
                    "authenticator": "idp-email-verification",
                    "authenticatorFlow": false,
                    "requirement": "ALTERNATIVE",
                    "priority": 10,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticatorFlow": true,
                    "requirement": "ALTERNATIVE",
                    "priority": 20,
                    "autheticatorFlow": true,
                    "flowAlias": "Verify Existing Account by Re-authentication",
                    "userSetupAllowed": false
                  }
                ]
              },
              {
                "id": "07be20ab-380d-44bd-a6b0-d6e5ab6d0fee",
                "alias": "Authentication Options",
                "description": "Authentication options.",
                "providerId": "basic-flow",
                "topLevel": false,
                "builtIn": true,
                "authenticationExecutions": [
                  {
                    "authenticator": "basic-auth",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticator": "basic-auth-otp",
                    "authenticatorFlow": false,
                    "requirement": "DISABLED",
                    "priority": 20,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticator": "auth-spnego",
                    "authenticatorFlow": false,
                    "requirement": "DISABLED",
                    "priority": 30,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  }
                ]
              },
              {
                "id": "8ace6621-f427-4eac-aaae-efdc3d81cc92",
                "alias": "Browser - Conditional OTP",
                "description": "Flow to determine if the OTP is required for the authentication",
                "providerId": "basic-flow",
                "topLevel": false,
                "builtIn": true,
                "authenticationExecutions": [
                  {
                    "authenticator": "conditional-user-configured",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticator": "auth-otp-form",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 20,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  }
                ]
              },
              {
                "id": "13744735-f0f5-45fe-aec6-02ca8cbcd31d",
                "alias": "Direct Grant - Conditional OTP",
                "description": "Flow to determine if the OTP is required for the authentication",
                "providerId": "basic-flow",
                "topLevel": false,
                "builtIn": true,
                "authenticationExecutions": [
                  {
                    "authenticator": "conditional-user-configured",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticator": "direct-grant-validate-otp",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 20,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  }
                ]
              },
              {
                "id": "7c362a61-c1fe-4bfa-975e-b167559fcf82",
                "alias": "First broker login - Conditional OTP",
                "description": "Flow to determine if the OTP is required for the authentication",
                "providerId": "basic-flow",
                "topLevel": false,
                "builtIn": true,
                "authenticationExecutions": [
                  {
                    "authenticator": "conditional-user-configured",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticator": "auth-otp-form",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 20,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  }
                ]
              },
              {
                "id": "30ba4a29-cc2d-4e43-b8aa-5697a86f5843",
                "alias": "Handle Existing Account",
                "description": "Handle what to do if there is existing account with same email/username like authenticated identity provider",
                "providerId": "basic-flow",
                "topLevel": false,
                "builtIn": true,
                "authenticationExecutions": [
                  {
                    "authenticator": "idp-confirm-link",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticatorFlow": true,
                    "requirement": "REQUIRED",
                    "priority": 20,
                    "autheticatorFlow": true,
                    "flowAlias": "Account verification options",
                    "userSetupAllowed": false
                  }
                ]
              },
              {
                "id": "8e7e9a6b-95cc-4b08-a630-de2fbba9825e",
                "alias": "Reset - Conditional OTP",
                "description": "Flow to determine if the OTP should be reset or not. Set to REQUIRED to force.",
                "providerId": "basic-flow",
                "topLevel": false,
                "builtIn": true,
                "authenticationExecutions": [
                  {
                    "authenticator": "conditional-user-configured",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticator": "reset-otp",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 20,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  }
                ]
              },
              {
                "id": "b76590ce-47d8-4c83-8815-a2ec66e63903",
                "alias": "User creation or linking",
                "description": "Flow for the existing/non-existing user alternatives",
                "providerId": "basic-flow",
                "topLevel": false,
                "builtIn": true,
                "authenticationExecutions": [
                  {
                    "authenticatorConfig": "create unique user config",
                    "authenticator": "idp-create-user-if-unique",
                    "authenticatorFlow": false,
                    "requirement": "ALTERNATIVE",
                    "priority": 10,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticatorFlow": true,
                    "requirement": "ALTERNATIVE",
                    "priority": 20,
                    "autheticatorFlow": true,
                    "flowAlias": "Handle Existing Account",
                    "userSetupAllowed": false
                  }
                ]
              },
              {
                "id": "6f7da661-3a7c-4f52-a21c-fe1c8e77e2ef",
                "alias": "Verify Existing Account by Re-authentication",
                "description": "Reauthentication of existing account",
                "providerId": "basic-flow",
                "topLevel": false,
                "builtIn": true,
                "authenticationExecutions": [
                  {
                    "authenticator": "idp-username-password-form",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticatorFlow": true,
                    "requirement": "CONDITIONAL",
                    "priority": 20,
                    "autheticatorFlow": true,
                    "flowAlias": "First broker login - Conditional OTP",
                    "userSetupAllowed": false
                  }
                ]
              },
              {
                "id": "e6a99e8b-67bd-4866-ab2e-7834fe59077d",
                "alias": "browser",
                "description": "browser based authentication",
                "providerId": "basic-flow",
                "topLevel": true,
                "builtIn": true,
                "authenticationExecutions": [
                  {
                    "authenticator": "auth-cookie",
                    "authenticatorFlow": false,
                    "requirement": "ALTERNATIVE",
                    "priority": 10,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticator": "auth-spnego",
                    "authenticatorFlow": false,
                    "requirement": "DISABLED",
                    "priority": 20,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticator": "identity-provider-redirector",
                    "authenticatorFlow": false,
                    "requirement": "ALTERNATIVE",
                    "priority": 25,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticatorFlow": true,
                    "requirement": "ALTERNATIVE",
                    "priority": 30,
                    "autheticatorFlow": true,
                    "flowAlias": "forms",
                    "userSetupAllowed": false
                  }
                ]
              },
              {
                "id": "5e82f7dd-4ec6-451d-8a2d-435e94138e11",
                "alias": "clients",
                "description": "Base authentication for clients",
                "providerId": "client-flow",
                "topLevel": true,
                "builtIn": true,
                "authenticationExecutions": [
                  {
                    "authenticator": "client-secret",
                    "authenticatorFlow": false,
                    "requirement": "ALTERNATIVE",
                    "priority": 10,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticator": "client-jwt",
                    "authenticatorFlow": false,
                    "requirement": "ALTERNATIVE",
                    "priority": 20,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticator": "client-secret-jwt",
                    "authenticatorFlow": false,
                    "requirement": "ALTERNATIVE",
                    "priority": 30,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticator": "client-x509",
                    "authenticatorFlow": false,
                    "requirement": "ALTERNATIVE",
                    "priority": 40,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  }
                ]
              },
              {
                "id": "e12f84dd-09f3-49f7-8d28-309d7d782e3f",
                "alias": "direct grant",
                "description": "OpenID Connect Resource Owner Grant",
                "providerId": "basic-flow",
                "topLevel": true,
                "builtIn": true,
                "authenticationExecutions": [
                  {
                    "authenticator": "direct-grant-validate-username",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticator": "direct-grant-validate-password",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 20,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticatorFlow": true,
                    "requirement": "CONDITIONAL",
                    "priority": 30,
                    "autheticatorFlow": true,
                    "flowAlias": "Direct Grant - Conditional OTP",
                    "userSetupAllowed": false
                  }
                ]
              },
              {
                "id": "233e37f3-8d83-4046-a4c0-7cbe7a1c6a54",
                "alias": "docker auth",
                "description": "Used by Docker clients to authenticate against the IDP",
                "providerId": "basic-flow",
                "topLevel": true,
                "builtIn": true,
                "authenticationExecutions": [
                  {
                    "authenticator": "docker-http-basic-authenticator",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  }
                ]
              },
              {
                "id": "1ed6180a-bae6-4334-b386-501eab4c4a35",
                "alias": "first broker login",
                "description": "Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account",
                "providerId": "basic-flow",
                "topLevel": true,
                "builtIn": true,
                "authenticationExecutions": [
                  {
                    "authenticatorConfig": "review profile config",
                    "authenticator": "idp-review-profile",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticatorFlow": true,
                    "requirement": "REQUIRED",
                    "priority": 20,
                    "autheticatorFlow": true,
                    "flowAlias": "User creation or linking",
                    "userSetupAllowed": false
                  }
                ]
              },
              {
                "id": "f422763e-c358-419c-a07c-540c82ac3813",
                "alias": "forms",
                "description": "Username, password, otp and other auth forms.",
                "providerId": "basic-flow",
                "topLevel": false,
                "builtIn": true,
                "authenticationExecutions": [
                  {
                    "authenticator": "auth-username-password-form",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticatorFlow": true,
                    "requirement": "CONDITIONAL",
                    "priority": 20,
                    "autheticatorFlow": true,
                    "flowAlias": "Browser - Conditional OTP",
                    "userSetupAllowed": false
                  }
                ]
              },
              {
                "id": "d9e0bf86-eb3f-42e0-b87d-5f4c10f93323",
                "alias": "http challenge",
                "description": "An authentication flow based on challenge-response HTTP Authentication Schemes",
                "providerId": "basic-flow",
                "topLevel": true,
                "builtIn": true,
                "authenticationExecutions": [
                  {
                    "authenticator": "no-cookie-redirect",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticatorFlow": true,
                    "requirement": "REQUIRED",
                    "priority": 20,
                    "autheticatorFlow": true,
                    "flowAlias": "Authentication Options",
                    "userSetupAllowed": false
                  }
                ]
              },
              {
                "id": "2e5d6b18-75cb-4994-bc3b-619e6baa5e20",
                "alias": "iuytr",
                "description": "",
                "providerId": "client-flow",
                "topLevel": true,
                "builtIn": false,
                "authenticationExecutions": []
              },
              {
                "id": "6be68c47-1064-421c-b857-edc31d15eca1",
                "alias": "registration",
                "description": "registration flow",
                "providerId": "basic-flow",
                "topLevel": true,
                "builtIn": true,
                "authenticationExecutions": [
                  {
                    "authenticator": "registration-page-form",
                    "authenticatorFlow": true,
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "autheticatorFlow": true,
                    "flowAlias": "registration form",
                    "userSetupAllowed": false
                  }
                ]
              },
              {
                "id": "ff62302c-f07a-4bad-9b36-7dfc03d2d494",
                "alias": "registration form",
                "description": "registration form",
                "providerId": "form-flow",
                "topLevel": false,
                "builtIn": true,
                "authenticationExecutions": [
                  {
                    "authenticator": "registration-user-creation",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 20,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticator": "registration-profile-action",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 40,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticator": "registration-password-action",
                    "authenticatorFlow": false,
                    "requirement": "DISABLED",
                    "priority": 50,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticator": "registration-recaptcha-action",
                    "authenticatorFlow": false,
                    "requirement": "DISABLED",
                    "priority": 60,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  }
                ]
              },
              {
                "id": "61b61df4-77ae-4a10-9113-1af5b1ce9684",
                "alias": "registration-no-pass",
                "description": "registration flow",
                "providerId": "basic-flow",
                "topLevel": true,
                "builtIn": false,
                "authenticationExecutions": [
                  {
                    "authenticator": "registration-page-form",
                    "authenticatorFlow": true,
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "autheticatorFlow": true,
                    "flowAlias": "registration-no-pass registration form",
                    "userSetupAllowed": false
                  },
                  {
                    "authenticator": "webauthn-authenticator",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 11,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  }
                ]
              },
              {
                "id": "d980ea07-45c1-44b5-96c9-a5509dbd1711",
                "alias": "registration-no-pass registration form",
                "description": "registration form",
                "providerId": "form-flow",
                "topLevel": false,
                "builtIn": false,
                "authenticationExecutions": [
                  {
                    "authenticator": "registration-user-creation",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 20,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticator": "registration-profile-action",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 40,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticator": "registration-password-action",
                    "authenticatorFlow": false,
                    "requirement": "DISABLED",
                    "priority": 50,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticator": "registration-recaptcha-action",
                    "authenticatorFlow": false,
                    "requirement": "DISABLED",
                    "priority": 60,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  }
                ]
              },
              {
                "id": "d358b9ff-a428-4902-82b2-b6676a1066bb",
                "alias": "reset credentials",
                "description": "Reset credentials for a user if they forgot their password or something",
                "providerId": "basic-flow",
                "topLevel": true,
                "builtIn": true,
                "authenticationExecutions": [
                  {
                    "authenticator": "reset-credentials-choose-user",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticator": "reset-credential-email",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 20,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticator": "reset-password",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 30,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticatorFlow": true,
                    "requirement": "CONDITIONAL",
                    "priority": 40,
                    "autheticatorFlow": true,
                    "flowAlias": "Reset - Conditional OTP",
                    "userSetupAllowed": false
                  }
                ]
              },
              {
                "id": "104e2fbd-331a-485d-95d7-e4d3e4347085",
                "alias": "saml ecp",
                "description": "SAML ECP Profile Authentication Flow",
                "providerId": "basic-flow",
                "topLevel": true,
                "builtIn": true,
                "authenticationExecutions": [
                  {
                    "authenticator": "http-basic-authenticator",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  }
                ]
              },
              {
                "id": "34a0da4e-120c-43e8-b327-d7f97fd248e1",
                "alias": "uygftrdtdfygh",
                "description": "",
                "providerId": "basic-flow",
                "topLevel": true,
                "builtIn": false,
                "authenticationExecutions": []
              },
              {
                "id": "db07860b-db62-4cd8-85e7-a60c848f9406",
                "alias": "webauthn",
                "description": "browser based authentication",
                "providerId": "basic-flow",
                "topLevel": true,
                "builtIn": false,
                "authenticationExecutions": [
                  {
                    "authenticator": "auth-cookie",
                    "authenticatorFlow": false,
                    "requirement": "ALTERNATIVE",
                    "priority": 10,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticator": "identity-provider-redirector",
                    "authenticatorFlow": false,
                    "requirement": "ALTERNATIVE",
                    "priority": 25,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticatorFlow": true,
                    "requirement": "REQUIRED",
                    "priority": 30,
                    "autheticatorFlow": true,
                    "flowAlias": "webauthn forms",
                    "userSetupAllowed": false
                  }
                ]
              },
              {
                "id": "93e470e2-2ae8-4126-bcb7-40739e45d0f9",
                "alias": "webauthn Browser - Conditional OTP",
                "description": "Flow to determine if the OTP is required for the authentication",
                "providerId": "basic-flow",
                "topLevel": false,
                "builtIn": false,
                "authenticationExecutions": [
                  {
                    "authenticator": "auth-username-form",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 0,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  },
                  {
                    "authenticator": "webauthn-authenticator",
                    "authenticatorFlow": false,
                    "requirement": "REQUIRED",
                    "priority": 1,
                    "autheticatorFlow": false,
                    "userSetupAllowed": false
                  }
                ]
              },
              {
                "id": "15b855ef-294a-4270-9920-8d1a2f95992c",
                "alias": "webauthn forms",
                "description": "Username, password, otp and other auth forms.",
                "providerId": "basic-flow",
                "topLevel": false,
                "builtIn": false,
                "authenticationExecutions": [
                  {
                    "authenticatorFlow": true,
                    "requirement": "REQUIRED",
                    "priority": 10,
                    "autheticatorFlow": true,
                    "flowAlias": "webauthn Browser - Conditional OTP",
                    "userSetupAllowed": false
                  }
                ]
              }
            ],
            "authenticatorConfig": [
              {
                "id": "e626fc25-c2d1-46b3-8d94-f39aa15c7f22",
                "alias": "create unique user config",
                "config": {
                  "require.password.update.after.registration": "false"
                }
              },
              {
                "id": "26a350c9-7b94-4c88-a6c8-5a483b0f16b2",
                "alias": "review profile config",
                "config": {
                  "update.profile.on.first.login": "missing"
                }
              }
            ],
            "requiredActions": [
              {
                "alias": "CONFIGURE_TOTP",
                "name": "Configure OTP",
                "providerId": "CONFIGURE_TOTP",
                "enabled": true,
                "defaultAction": false,
                "priority": 10,
                "config": {}
              },
              {
                "alias": "terms_and_conditions",
                "name": "Terms and Conditions",
                "providerId": "terms_and_conditions",
                "enabled": false,
                "defaultAction": false,
                "priority": 20,
                "config": {}
              },
              {
                "alias": "UPDATE_PASSWORD",
                "name": "Update Password",
                "providerId": "UPDATE_PASSWORD",
                "enabled": true,
                "defaultAction": false,
                "priority": 30,
                "config": {}
              },
              {
                "alias": "UPDATE_PROFILE",
                "name": "Update Profile",
                "providerId": "UPDATE_PROFILE",
                "enabled": true,
                "defaultAction": false,
                "priority": 40,
                "config": {}
              },
              {
                "alias": "VERIFY_EMAIL",
                "name": "Verify Email",
                "providerId": "VERIFY_EMAIL",
                "enabled": true,
                "defaultAction": false,
                "priority": 50,
                "config": {}
              },
              {
                "alias": "delete_account",
                "name": "Delete Account",
                "providerId": "delete_account",
                "enabled": false,
                "defaultAction": false,
                "priority": 60,
                "config": {}
              },
              {
                "alias": "webauthn-register",
                "name": "Webauthn Register",
                "providerId": "webauthn-register",
                "enabled": true,
                "defaultAction": false,
                "priority": 70,
                "config": {}
              },
              {
                "alias": "webauthn-register-passwordless",
                "name": "Webauthn Register Passwordless",
                "providerId": "webauthn-register-passwordless",
                "enabled": true,
                "defaultAction": false,
                "priority": 80,
                "config": {}
              },
              {
                "alias": "update_user_locale",
                "name": "Update User Locale",
                "providerId": "update_user_locale",
                "enabled": true,
                "defaultAction": false,
                "priority": 1000,
                "config": {}
              }
            ],
            "browserFlow": "webauthn",
            "registrationFlow": "registration-no-pass",
            "directGrantFlow": "direct grant",
            "resetCredentialsFlow": "reset credentials",
            "clientAuthenticationFlow": "clients",
            "dockerAuthenticationFlow": "docker auth",
            "attributes": {
              "cibaBackchannelTokenDeliveryMode": "poll",
              "cibaAuthRequestedUserHint": "login_hint",
              "clientOfflineSessionMaxLifespan": "0",
              "oauth2DevicePollingInterval": "5",
              "clientSessionIdleTimeout": "0",
              "actionTokenGeneratedByUserLifespan-execute-actions": "",
              "actionTokenGeneratedByUserLifespan-verify-email": "",
              "clientOfflineSessionIdleTimeout": "0",
              "actionTokenGeneratedByUserLifespan-reset-credentials": "",
              "cibaInterval": "5",
              "realmReusableOtpCode": "false",
              "cibaExpiresIn": "120",
              "oauth2DeviceCodeLifespan": "600",
              "actionTokenGeneratedByUserLifespan-idp-verify-account-via-email": "",
              "parRequestUriLifespan": "60",
              "clientSessionMaxLifespan": "0"
            },
            "keycloakVersion": "20.0.2",
            "userManagedAccessAllowed": false,
            "clientProfiles": {
              "profiles": []
            },
            "clientPolicies": {
              "policies": []
            }
          }
      kind: ConfigMap
      metadata:
        name: keycloak-configmap

- name: deploy Keycloak
  kubernetes.core.k8s:
    state: present
    namespace: oauth
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: keycloak
        labels:
          app: keycloak
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: keycloak
        template:
          metadata:
            labels:
              app: keycloak
          spec:
            containers:
              - name: keycloak
                image: quay.io/keycloak/keycloak:20.0.2
                # https://www.mastertheboss.com/keycloak/keycloak-with-docker/
                args: ["start-dev --import-realm"]
                env:
                  - name: KEYCLOAK_ADMIN
                    value: "admin"
                  - name: KEYCLOAK_ADMIN_PASSWORD
                    value: "admin"
                  - name: KC_PROXY
                    value: "edge"
                  - name: KEYCLOAK_IMPORT
                    value: /opt/keycloak/data/import/realm.json
                # https://www.keycloak.org/server/importExport
                # https://kubernetes.io/docs/concepts/storage/volumes/
                volumeMounts:
                  - name: keycloak-init-config
                    mountPath: /opt/keycloak/data/import
                ports:
                  - name: http
                    containerPort: 8080
                readinessProbe:
                  httpGet:
                    path: /realms/master
                    port: 8080
            # https://kubernetes.io/docs/concepts/storage/volumes/
            volumes:
              - name: keycloak-init-config
                configMap:
                  name: keycloak-configmap

- name: define a VirtualService for Keycloak
  kubernetes.core.k8s:
    name: virtualservice-keycloak
    state: present
    namespace: oauth
    definition:
      apiVersion: networking.istio.io/v1beta1
      kind: VirtualService
      metadata:
        name: keycloak
        namespace: oauth
      spec:
        gateways:
          - shared-gateway.istio-system.svc.cluster.local # master gateway (there probably should only be 1 gateway)
        hosts:
          - "{{ keycloak.keycloak_dn }}"
        http:
          - match:
              - uri:
                  prefix: /
              # - uri:
              #     regex: '^.*\.(ico|png|jpg|js|woff|svg|woff2|eot|ttf|css)$'
            route:
              - destination:
                  host: keycloak.oauth.svc.cluster.local
                  port:
                    number: 8080 # this matches the port set above fpr the Deployment
                  retries:
                    attempts: 1
                    perTryTimeout: 5s
                    retryOn: gateway-error,connect-failure,refused-stream

# - name: add bitnami helm repo (contains redis as an installation candidate)
#   kubernetes.core.helm_repository:
#     name: bitnami
#     repo_url: https://charts.bitnami.com/bitnami

# - name: install redis
#   kubernetes.core.helm:
#     name: redis-oauth2-proxy
#     namespace: oauth
#     chart_ref: bitnami/redis
#     chart_version: 18.6.1
#     create_namespace: false
#     # purge: yes
#     update_repo_cache: yes
#     # no additional configuration may be necessary
#     values:
#       auth:
#         enabled: false

- name: setup redis image
  shell: |
    kubectl run redis --image redis -n oauth

- name: expose redis port
  shell: |
    kubectl expose pod redis -n oauth --port 6379

# now proceed to oauth2-proxy installation

- name: add oauth2-proxy helm repo
  kubernetes.core.helm_repository:
    name: oauth2-proxy
    repo_url: https://oauth2-proxy.github.io/manifests

- name: install oauth2-proxy
  kubernetes.core.helm:
    name: oauth2-proxy
    namespace: oauth
    chart_ref: oauth2-proxy/oauth2-proxy
    create_namespace: false
    # purge: yes
    update_repo_cache: yes
    # https://artifacthub.io/packages/helm/oauth2-proxy/oauth2-proxy?modal=values
    values:
      config:
        # OAuth client ID
        clientID: "gloo"
        # OAuth client secret
        clientSecret: "MsQLofFupVbCi6iYMYJ2qrVn6rR8e2jN"
        # Create a new secret with the following command
        # openssl rand -base64 32 | head -c 32 | base64
        # Use an existing secret for OAuth2 credentials (see secret.yaml for required fields)
        # Example:
        # existingSecret: secret
        cookieSecret: "DV0Y+mXgqT4Duitw16amd8TZjl/bQVou"
        # The name of the cookie that oauth2-proxy will create
        # If left empty, it will default to the release name
        cookieName: ""
        # Default configuration, to be overridden
        configFile: |-
          provider = "oidc"
          provider_display_name = "KEYCLOAK"
          oidc_issuer_url = "https://{{ keycloak.keycloak_dn }}/realms/{{ keycloak.keycloak_realm }}"
          login_url = "https://{{ keycloak.keycloak_dn }}/realms/{{ keycloak.keycloak_realm }}/protocol/openid-connect/auth"
          redeem_url = "https://{{ keycloak.keycloak_dn }}/realms/{{ keycloak.keycloak_realm }}/protocol/openid-connect/token"
          profile_url = "https://{{ keycloak.keycloak_dn }}/realms/{{ keycloak.keycloak_realm }}/protocol/openid-connect/userinfo"
          validate_url = "https://{{ keycloak.keycloak_dn }}/realms/{{ keycloak.keycloak_realm }}/protocol/openid-connect/userinfo"
          ssl_insecure_skip_verify = true
          skip_provider_button = true
          email_domains = ["*"]
          insecure_oidc_allow_unverified_email = true
          scope = "email profile openid"
          oidc_extra_audiences = ["gloo"]
          cookie_secure = true
          pass_host_header = true
          pass_user_headers = true
          standard_logging = true
          auth_logging = true
          request_logging = true
          upstreams = ["static://200"]
          set_xauthrequest = true
          set_authorization_header = true # oddly pass the id_token as Authorization header
      sessionStorage:
        # Can be one of the supported session storage cookie|redis
        type: redis
        redis:
          # Name of the Kubernetes secret containing the redis & redis sentinel password values (see also "sessionStorage.redis.passwordKey")
          existingSecret: ""
          # Redis password value. Applicable for all Redis configurations. Taken from redis subchart secret if not set. "sessionStorage.redis.existingSecret" takes precedence
          password: ""
          # Key of the Kubernetes secret data containing the redis password value
          passwordKey: "" # redis-password
          # Can be one of standalone|cluster|sentinel
          clientType: "standalone"
          standalone:
            # redis-oauth2-proxy-master
            connectionUrl: "redis://redis.oauth.svc.cluster.local:6379" # I am not exactly sure what the text before "oauth.svc" should be

