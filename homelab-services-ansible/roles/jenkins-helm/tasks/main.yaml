- name: create 'jenkins' namespace
  kubernetes.core.k8s:
    name: jenkins
    api_version: v1
    kind: Namespace
    state: present
    definition:
      metadata:
        labels:
          istio-injection: enabled

- name: create Jenkins login username and password as a secret
  kubernetes.core.k8s:
    state: present
    namespace: jenkins
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: jenkins-secret
      data:
        jenkins-admin-password: "{{ jenkins.admin_password | b64encode }}"
        jenkins-admin-user: "{{ jenkins.admin_username | b64encode }}"
      type: Opaque

- name: create secret text that will get synced into a Jenkins credential using kubernetes-credentials-provider Jenkins plugin
  kubernetes.core.k8s:
    state: present
    namespace: jenkins
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: k8s-auth-token-for-namespace-cicd
        labels:
          "jenkins.io/credentials-type": "secretText"
        annotations:
          "jenkins.io/credentials-description": "jenkins service account token (ns: cicd)"
      stringData:
        text: "{{ jenkins_token }}"
      type: Opaque

- name: create docker hub registry secret that will get synced into a Jenkins credential using kubernetes-credentials-provider Jenkins plugin
  kubernetes.core.k8s:
    state: present
    namespace: jenkins
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: docker-hub-registry-secret
        labels:
          "jenkins.io/credentials-type": "usernamePassword"
        annotations:
          "jenkins.io/credentials-description": "docker hub registry credentials"
      stringData:
        username: "{{ docker_hub.username }}"
        password: "{{ docker_hub.password }}"
      type: Opaque

- name: add jenkins helm repo
  kubernetes.core.helm_repository:
    name: jenkins
    repo_url: https://charts.jenkins.io

# debugging
- name: find 'jenkins_gitea_token' variable
  debug:
    msg: "{{ hostvars[inventory_hostname]['jenkins_gitea_token'] }}"

# https://artifacthub.io/packages/helm/jenkinsci/jenkins?modal=values
- name: install jenkins
  kubernetes.core.helm:
    name: jenkins
    namespace: jenkins
    chart_ref: jenkins/jenkins
    chart_version: "{{ jenkins_version }}"
    create_namespace: false
    # purge: yes
    update_repo_cache: yes
    values:
      controller:
        adminSecret: true
        # https://github.com/jenkinsci/helm-charts/issues/210#issuecomment-1493044000
        podSecurityContextOverride:
          runAsUser: 1000
          fsGroup: 1000
          runAsNonRoot: true
          supplementalGroups: [1000]          
        jenkinsUrl: "https://{{ jenkins.hostname }}.{{ lan_tld }}"
        serviceType: ClusterIP
        servicePort: 80
        admin:
          existingSecret: jenkins-secret
        installPlugins: "{{ jenkins.install_plugins }}"
        JCasC:
          configScripts:
          # NOTES: 
          # 1. need to put down "sub" for the field to extract user info from
          # 2. "clientSecret" needs to come from the authN provider (Keycloak, in this instance)
          # JCasC export as described here (https://www.jenkins.io/doc/book/managing/casc/#configuring-a-plugin-with-jcasc) will provide "clientSecret"
          # as some encoding
          # 3. "userNameField" needs to be "sub" (see issue 213 below)
          # 4. specifying "securityRealm" will override any other specification of "securityRealm" 
          # references:
          # https://github.com/jenkinsci/oic-auth-plugin/issues/213 
          # https://plugins.jenkins.io/oic-auth/
          # 
          # inventory_hostname is the same as for Gitea (the "Helm" host)
            jenkins-casc-configs: |
              credentials:
                system:
                  domainCredentials:
                  - credentials:
                    - giteaAccessToken:
                        description: "jenkins"
                        id: "jenkins"
                        scope: GLOBAL
                        token: "{{ hostvars[inventory_hostname]['jenkins_gitea_token'] }}"

              unclassified:
                giteaServers:
                  servers:
                  - credentialsId: "jenkins"
                    displayName: "gitea"
                    manageHooks: true
                    serverUrl: "https://gitea.milkyway.localhostcert.net"

              jenkins:
                securityRealm:
                  oic:
                    authorizationServerUrl: "https://auth.milkyway.localhostcert.net/realms/homelab/protocol/openid-connect/auth"
                    automanualconfigure: "auto"
                    clientId: "jenkins"
                    clientSecret: "rgtwfxQV0IxZG9Rj1MkvZKMnPbjRDpZM"
                    disableSslVerification: false
                    endSessionEndpoint: "https://auth.milkyway.localhostcert.net/realms/homelab/protocol/openid-connect/logout"
                    escapeHatchEnabled: true
                    escapeHatchSecret: "{AQAAABAAAAAQQ4uYa//ZppNNQdGeq7mKRQqapNMEKxEnFCttm++uxIY=}"
                    escapeHatchUsername: "admin"
                    logoutFromOpenidProvider: false
                    scopes: "web-origins acr address phone openid roles profile offline_access microprofile-jwt\
                      \ email"
                    tokenAuthMethod: "client_secret_post"
                    tokenServerUrl: "https://auth.milkyway.localhostcert.net/realms/homelab/protocol/openid-connect/token"
                    userInfoServerUrl: "https://auth.milkyway.localhostcert.net/realms/homelab/protocol/openid-connect/userinfo"
                    wellKnownOpenIDConfigurationUrl: "https://auth.milkyway.localhostcert.net/realms/homelab/.well-known/openid-configuration"
                    userNameField: "sub"

                systemMessage: Homelab
                clouds:
                  - kubernetes:
                      containerCap: 10
                      containerCapStr: "10"
                      credentialsId: "k8s-auth-token-for-namespace-cicd"
                      jenkinsTunnel: "jenkins-agent.jenkins.svc.cluster.local:50000"
                      jenkinsUrl: "http://jenkins.jenkins.svc.cluster.local:80"
                      name: "cicd"
                      namespace: "cicd"
                      serverUrl: "https://kubernetes.default"
                      skipTlsVerify: true
              jobs:
                - script: >
                    pipelineJob('go-sample') {
                      description("An example Jenkins pipeline that:\n\t  - checks out code from https://github.com/markperdue/go-sample.git\n\t  - builds the go source code into a container\n\t  - publishes the container to a registry\n\t  - deploys the application to your homelab cluster using the included helm chart\n\nHit 'Build Now' to trigger an intial run of the build job.\nAfter the first run, click 'Build with Parameters' for all the options!")
                      definition {
                        cpsScm {
                          scm {
                            git {
                              remote { url('https://github.com/markperdue/go-sample.git') }
                              branches('master')
                              scriptPath('Jenkinsfile')
                              extensions { }
                              lightweight(true)
                            }
                          }
                        }
                      }
                    }
      persistence:
        enabled: true
        storageClass: longhorn
      rbac:
        readSecrets: true

- name: define a VirtualService for jenkins
  kubernetes.core.k8s:
    name: virtualservice-jenkins
    state: present
    namespace: jenkins
    definition:
      apiVersion: networking.istio.io/v1beta1
      kind: VirtualService
      metadata:
        name: jenkins
        namespace: jenkins
      spec:
        hosts:
          - "jenkins.milkyway.localhostcert.net"
        gateways:
          # https://discuss.istio.io/t/istio-ingressgateway-controller-and-namespaces/1217/8
          - shared-gateway.istio-system.svc.cluster.local
        # https://istio.io/latest/docs/reference/config/networking/virtual-service/#HTTPRoute
        http:
          # https://github.com/istio/istio/issues/19599
          - name: "jenkins routes"
            match:
              - uri:
                  prefix: /
              - uri:
                  regex: '^.*\.(ico|png|jpg|js|woff|svg|woff2|eot|ttf|css)$'
            route:
              - destination:
                  # use 'kubectl run alpine --rm -ti --image alpine /bin/sh' to debug from within cluster
                  host: jenkins.jenkins.svc.cluster.local
                  port:
                    number: 80 # this matches the port defined above
                # https://medium.com/@in.live.in/puzzling-503s-and-istio-1bf504b9aae6
                # this appears needed to work around HTTP 503 errors
                retries:
                  attempts: 3
                  perTryTimeout: 5s
                  retryOn: gateway-error,connect-failure,refused-stream
