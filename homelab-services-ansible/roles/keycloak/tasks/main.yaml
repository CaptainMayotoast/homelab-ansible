- name: create 'oauth' namespace # oauth2-proxy and keycloak are all in the same namespace
  kubernetes.core.k8s:
    name: oauth
    api_version: v1
    kind: Namespace
    state: present

# Bitnami has a helm chart for Keycloak, but try this first
# https://raw.githubusercontent.com/keycloak/keycloak-quickstarts/20.0.2/kubernetes-examples/keycloak.yaml
- name: declare Keycloak as a Service
  kubernetes.core.k8s:
    state: present
    namespace: oauth
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: keycloak
        labels:
          app: keycloak
      spec:
        ports:
          - name: http
            port: 8080
            targetPort: 8080
        selector:
          app: keycloak
        # loadBalancerIP: "{{ keycloak.load_balancer_ip }}" # for debugging
        type: ClusterIP #LoadBalancer

# TODO inject realm JSON from Keycloak (via export)
# https://stackoverflow.com/questions/71740110/create-keycloak-deployment-with-imported-realm-configuration
- name: create a ConfigMap from Keycloak realm JSON
  kubernetes.core.k8s:
    state: present
    namespace: oauth
    definition:
      apiVersion: v1
      data:
        realm.json: |
          {

          }
      kind: ConfigMap
      metadata:
        name: keycloak-configmap

- name: deploy Keycloak
  kubernetes.core.k8s:
    state: present
    namespace: oauth
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: keycloak
        labels:
          app: keycloak
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: keycloak
        template:
          metadata:
            labels:
              app: keycloak
          spec:
            containers:
              - name: keycloak
                image: "quay.io/keycloak/keycloak:{{ keycloak_version }}"
                # https://www.mastertheboss.com/keycloak/keycloak-with-docker/
                args: ["start-dev"] # --import-realm"]
                env:
                  - name: KEYCLOAK_ADMIN
                    value: "admin"
                  - name: KEYCLOAK_ADMIN_PASSWORD
                    value: "admin"
                  # - name: KC_PROXY
                  #   value: "edge"
                  # - name: KEYCLOAK_IMPORT
                  #   value: /opt/keycloak/data/import/realm.json
                # https://www.keycloak.org/server/importExport
                # https://kubernetes.io/docs/concepts/storage/volumes/
                # volumeMounts:
                #   - name: keycloak-init-config
                #     mountPath: /opt/keycloak/data/import
                ports:
                  - name: http
                    containerPort: 8080
            #     readinessProbe:
            #       httpGet:
            #         path: /realms/master
            #         port: 8080
            # # https://kubernetes.io/docs/concepts/storage/volumes/
            # volumes:
            #   - name: keycloak-init-config
            #     configMap:
            #       name: keycloak-configmap

- name: define a VirtualService for Keycloak
  kubernetes.core.k8s:
    name: virtualservice-keycloak
    state: present
    namespace: oauth
    definition:
      apiVersion: networking.istio.io/v1beta1
      kind: VirtualService
      metadata:
        name: keycloak
        namespace: oauth
      spec:
        gateways:
          - shared-gateway.istio-system.svc.cluster.local # master gateway (there probably should only be 1 gateway)
        hosts:
          - "{{ keycloak.keycloak_dn }}"
        http:
          - match:
              - uri:
                  prefix: /
              - uri:
                  regex: '^.*\.(ico|png|jpg|js|woff|svg|woff2|eot|ttf|css|html)$'
            route:
              - destination:
                  host: keycloak.oauth.svc.cluster.local
                  port:
                    number: 8080 # this matches the port set above fpr the Deployment
                  
                  # https://medium.com/@in.live.in/puzzling-503s-and-istio-1bf504b9aae6
                  # this appears needed to work around HTTP 503 errors
                  # retries:
                  #   attempts: 3
                  #   perTryTimeout: 5s
                  #   retryOn: gateway-error,connect-failure,refused-stream

# an attempt at OAuth2-proxy + webauthn integration, below
# maybe come back to this later?

# - name: add bitnami helm repo (contains redis as an installation candidate)
#   kubernetes.core.helm_repository:
#     name: bitnami
#     repo_url: https://charts.bitnami.com/bitnami

# - name: install redis
#   kubernetes.core.helm:
#     name: redis-oauth2-proxy
#     namespace: oauth
#     chart_ref: bitnami/redis
#     chart_version: 18.6.1
#     create_namespace: false
#     # purge: yes
#     update_repo_cache: yes
#     # no additional configuration may be necessary
#     values:
#       auth:
#         enabled: false

# - name: setup redis image
#   shell: |
#     kubectl run redis --image redis -n oauth

# - name: expose redis port
#   shell: |
#     kubectl expose pod redis -n oauth --port 6379

# now proceed to oauth2-proxy installation

# - name: add oauth2-proxy helm repo
#   kubernetes.core.helm_repository:
#     name: oauth2-proxy
#     repo_url: https://oauth2-proxy.github.io/manifests

# - name: install oauth2-proxy
#   kubernetes.core.helm:
#     name: oauth2-proxy
#     namespace: oauth
#     chart_ref: oauth2-proxy/oauth2-proxy
#     create_namespace: false
#     # purge: yes
#     update_repo_cache: yes
#     # https://artifacthub.io/packages/helm/oauth2-proxy/oauth2-proxy?modal=values
#     values:
#       config:
#         # OAuth client ID
#         clientID: "gloo"
#         # OAuth client secret
#         clientSecret: "MsQLofFupVbCi6iYMYJ2qrVn6rR8e2jN"
#         # Create a new secret with the following command
#         # openssl rand -base64 32 | head -c 32 | base64
#         # Use an existing secret for OAuth2 credentials (see secret.yaml for required fields)
#         # Example:
#         # existingSecret: secret
#         cookieSecret: "DV0Y+mXgqT4Duitw16amd8TZjl/bQVou"
#         # The name of the cookie that oauth2-proxy will create
#         # If left empty, it will default to the release name
#         cookieName: ""
#         # Default configuration, to be overridden
#         configFile: |-
#           provider = "oidc"
#           provider_display_name = "KEYCLOAK"
#           oidc_issuer_url = "https://{{ keycloak.keycloak_dn }}/realms/{{ keycloak.keycloak_realm }}"
#           login_url = "https://{{ keycloak.keycloak_dn }}/realms/{{ keycloak.keycloak_realm }}/protocol/openid-connect/auth"
#           redeem_url = "https://{{ keycloak.keycloak_dn }}/realms/{{ keycloak.keycloak_realm }}/protocol/openid-connect/token"
#           profile_url = "https://{{ keycloak.keycloak_dn }}/realms/{{ keycloak.keycloak_realm }}/protocol/openid-connect/userinfo"
#           validate_url = "https://{{ keycloak.keycloak_dn }}/realms/{{ keycloak.keycloak_realm }}/protocol/openid-connect/userinfo"
#           ssl_insecure_skip_verify = true
#           skip_provider_button = true
#           email_domains = ["*"]
#           insecure_oidc_allow_unverified_email = true
#           scope = "email profile openid"
#           oidc_extra_audiences = ["gloo"]
#           cookie_secure = true
#           pass_host_header = true
#           pass_user_headers = true
#           standard_logging = true
#           auth_logging = true
#           request_logging = true
#           upstreams = ["static://200"]
#           set_xauthrequest = true
#           set_authorization_header = true # oddly pass the id_token as Authorization header
#       sessionStorage:
#         # Can be one of the supported session storage cookie|redis
#         type: redis
#         redis:
#           # Name of the Kubernetes secret containing the redis & redis sentinel password values (see also "sessionStorage.redis.passwordKey")
#           existingSecret: ""
#           # Redis password value. Applicable for all Redis configurations. Taken from redis subchart secret if not set. "sessionStorage.redis.existingSecret" takes precedence
#           password: ""
#           # Key of the Kubernetes secret data containing the redis password value
#           passwordKey: "" # redis-password
#           # Can be one of standalone|cluster|sentinel
#           clientType: "standalone"
#           standalone:
#             # redis-oauth2-proxy-master
#             connectionUrl: "redis://redis.oauth.svc.cluster.local:6379" # I am not exactly sure what the text before "oauth.svc" should be

