- name: install kubernetes dashboard
  kubernetes.core.k8s:
    state: present
    namespace: kubernetes-dashboard
    definition: '{{ item }}'
  with_items: '{{ lookup("url", kubernetes_dashboard.manifest_url, split_lines=False) | from_yaml_all | list }}'
  when: item is not none

- name: patch kubernetes dashboard service to LoadBalancer
  kubernetes.core.k8s:
    state: present
    namespace: kubernetes-dashboard
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: kubernetes-dashboard
      spec:
        type: LoadBalancer
        loadBalancerIP: "{{ kubernetes_dashboard.load_balancer_ip }}"

- name: create service account for kubernetes dashboard
  kubernetes.core.k8s:
    state: present
    namespace: kubernetes-dashboard
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: admin-user

- name: grant the 'admin-user' service account the 'cluster-admin' cluster role for the kubernetes dashboard
  kubernetes.core.k8s:
    state: present
    namespace: kubernetes-dashboard
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: admin-user
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
      - kind: ServiceAccount
        name: admin-user
        namespace: kubernetes-dashboard

- name: fetch 'admin-user' service account details from 'kubernetes-dashboard' namespace
  kubernetes.core.k8s_info:
    kind: ServiceAccount
    namespace: kubernetes-dashboard
    name: admin-user
  register: sa_admin_user

- name: create 'admin-user' token secret in 'kubernetes-dashboard' namespace
  kubernetes.core.k8s:
    state: present
    namespace: kubernetes-dashboard
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: admin-user
        annotations:
          kubernetes.io/service-account.name: "admin-user"
      type: kubernetes.io/service-account-token
      data:

- name: get 'admin-user' token details from 'kubernetes-dashboard' namespace
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: kubernetes-dashboard
    name: admin-user
  register: admin_user_token_data

- name: set fact of service account token from 'kubernetes-dashboard' namespace
  set_fact:
    admin_user_token: "{{ admin_user_token_data.resources[0].data.token | b64decode }}"

- name: get service details from 'kubernetes-dashboard' namespace
  kubernetes.core.k8s_info:
    kind: Service
    namespace: kubernetes-dashboard
    name: kubernetes-dashboard
  register: service_kubernetes_dashboard_data

- name: set fact of external ip of service from 'kubernetes-dashboard' namespace
  set_fact:
    kubernetes_dashboard_external_ip: "{{ service_kubernetes_dashboard_data.resources[0].status.loadBalancer.ingress[0].ip }}"

- debug:
    msg: "kubernetes-dashboard available at https://{{ kubernetes_dashboard_external_ip }} with token: {{ admin_user_token }}"
